Biosimulations_format_utils.sim package

Submodules

Biosimulations_format_utils.sim.core module

Utilities for working with simulations

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-22

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_format_utils.sim.core.SimWriter

   Bases: "abc.ABC"

   Base class for simulation writers

   _abc_impl = <_abc_data object>

class Biosimulations_format_utils.sim.core.SimReader

   Bases: "abc.ABC"

   Base class for simulation readers

   _abc_impl = <_abc_data object>

exception Biosimulations_format_utils.sim.core.SimIoError

   Bases: "Exception"

   Simulation IO error

exception Biosimulations_format_utils.sim.core.SimIoWarning

   Bases: "UserWarning"

   Simulation IO warning

Biosimulations_format_utils.sim.data_model module

Data model for simulations

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-31

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_format_utils.sim.data_model.Simulation(id=None, name=None, image=None, description=None, tags=None, identifiers=None, references=None, authors=None, license=None, format=None, model=None, model_parameter_changes=None, algorithm=None, algorithm_parameter_changes=None)

   Bases: "object"

   Simulation experiments

   id

      id

      Type:
         "str"

   name

      name

      Type:
         "str"

   image

      image file

      Type:
         "RemoteFile"

   description

      description

      Type:
         "str"

   tags

      tags

      Type:
         "list" of "str"

   identifiers

      identifiers

      Type:
         "list" of "Identifier"

   references

      references

      Type:
         "list" of "JournalReference"

   authors

      authors

      Type:
         "list" of "Person"

   license

      license

      Type:
         "License"

   format

      format

      Type:
         "Format"

   model

      model

      Type:
         "Model"

   model_parameter_changes

      model parameter changes

      Type:
         "list" of

         ParameterChange

   algorithm

      simulation algorithm

      Type:
         Algorithm

   algorithm_parameter_changes

      simulation algorithm parameter changes

      Type:
         "list" of

         ParameterChange

   __eq__(other)

      Determine if two simulations are semantically equal

      Parameters:
         other

          (

         Simulation

         ) -- other simulation

      Returns:
         "bool"

   classmethod from_json(val)

      Create simulation from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         Simulation

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_format_utils.sim.data_model.TimecourseSimulation(id=None, name=None, image=None, description=None, tags=None, identifiers=None, references=None, authors=None, license=None, format=None, model=None, model_parameter_changes=None, start_time=None, output_start_time=None, end_time=None, num_time_points=None, algorithm=None, algorithm_parameter_changes=None)

   Bases:

   Biosimulations_format_utils.sim.data_model.Simulation

   Timecourse simulation

   start_time

      start time

      Type:
         "float"

   output_start_time

      time to begin recording simulation results

      Type:
         "float"

   end_time

      end time

      Type:
         "float"

   num_time_points

      number of time points to record

      Type:
         "int"

   __eq__(other)

      Determine if two simulations are semantically equal

      Parameters:
         other

          (

         TimecourseSimulation

         ) -- other algorithm

      Returns:
         "bool"

   classmethod from_json(val)

      Create simulation from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         TimecourseSimulation

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_format_utils.sim.data_model.SteadyStateSimulation(id=None, name=None, image=None, description=None, tags=None, identifiers=None, references=None, authors=None, license=None, format=None, model=None, model_parameter_changes=None, algorithm=None, algorithm_parameter_changes=None)

   Bases:

   Biosimulations_format_utils.sim.data_model.Simulation

   Steady-state simulation

class Biosimulations_format_utils.sim.data_model.Algorithm(id=None, name=None, parameters=None)

   Bases: "object"

   Simulation algorithm

   id

      KiSAO id

      Type:
         "str"

   name

      name

      Type:
         "str"

   parameters

      parameters

      Type:
         "list" of

         AlgorithmParameter

   __eq__(other)

      Determine if two algorithms are semantically equal

      Parameters:
         other

          (

         Algorithm

         ) -- other algorithm

      Returns:
         "bool"

   classmethod from_json(val)

      Create algorithm from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         Algorithm

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_format_utils.sim.data_model.AlgorithmParameter(id=None, name=None, type=None, value=None, kisao_id=None)

   Bases: "object"

   Algorithm parameter

   id

      id

      Type:
         "str"

   name

      name

      Type:
         "str"

   type

      type

      Type:
         "Type"

   value

      value

      Type:
         "object"

   kisao_id

      KiSAO id

      Type:
         "str"

   __eq__(other)

      Determine if two algorithm parameters are semantically equal

      Parameters:
         other

          (

         AlgorithmParameter

         ) -- other algorithm parameter

      Returns:
         "bool"

   classmethod from_json(val)

      Create algorithm parameter from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         AlgorithmParameter

   static sort_key(parameter)

      Get a key to sort an algorithm parameter

      Parameters:
         parameter

          (

         AlgorithmParameter

         ) -- algorithm parameter

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_format_utils.sim.data_model.ParameterChange(parameter=None, value=None)

   Bases: "object"

   ModelParameter change

   parameter

      parameter

      Type:
         "ModelParameter" or

         AlgorithmParameter

   value

      value

      Type:
         "object"

   __eq__(other)

      Determine if two parameter changes are semantically equal

      Parameters:
         other

          (

         ParameterChange

         ) -- other parameter change

      Returns:
         "bool"

   classmethod from_json(val, ParameterType)

      Create parameter change from JSON

      Parameters:
         val (dict) --

         ParameterType (type) -- type of parameter

      Returns:
         ParameterChange

   static sort_key(change)

      Get a key to sort a parameter change

      Parameters:
         change

          (

         ParameterChange

         ) -- parameter change

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

Biosimulations_format_utils.sim.sbml module

Utilities for working with SED-ML with SBML models

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-20

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_format_utils.sim.sbml.SbmlSedMlSimWriter

   Bases:

   Biosimulations_format_utils.sim.sedml.SedMlSimWriter

   Writer for SED-ML for SBML models

   MODEL_LANGUAGE_NAME = 'SBML'

   MODEL_LANGUAGE_URN = 'urn:sedml:sbml'

   _abc_impl = <_abc_data object>

class Biosimulations_format_utils.sim.sbml.SbmlSedMlSimReader

   Bases:

   Biosimulations_format_utils.sim.sedml.SedMlSimReader

   Reader for SED-ML for SBML models

   MODEL_LANGUAGE_NAME = 'SBML'

   MODEL_LANGUAGE_URN = 'urn:sedml:sbml'

   _abc_impl = <_abc_data object>

Biosimulations_format_utils.sim.sedml module

Utilities for working with SED-ML

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-20

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_format_utils.sim.sedml.SedMlSimWriter

   Bases:

   Biosimulations_format_utils.sim.core.SimWriter

   Base class for SED-ML generator for each model format

   MODEL_LANGUAGE_NAME = None

   MODEL_LANGUAGE_URN = None

   _abc_impl = <_abc_data object>

   _add_algorithm_to_sim(algorithm, doc_sed, sim_sed)

      Add a simulation algorithm to a SED document

      Parameters:
         algorithm (Algorithm) -- simulation algorithm

         doc_sed (libsedml.SedDocument) -- SED document

         sim_sed (libsedml.SedSimulation) -- SED simulation

      Returns:
         SED simulation algorithm

      Return type:
         "libsedml.SedAlgorithm"

   _add_annotation_to_obj(nodes, doc_sed, obj_sed, namespaces)

      Add annotation to a SED object

      Parameters:
         nodes (list of XmlNode) -- annotation

         doc_sed (libsedml.SedDocument) -- SED document

         obj_sed (libsedml.SedBase) -- SED object

         namespaces (set of str) -- list of namespaces

   _add_data_gen_to_doc(id, name, doc_sed)

      Add a data generator to a SED document

      Parameters:
         id (str) -- id

         name (str) -- name

         doc_sed (libsedml.SedDocument) -- SED document

      Returns:
         SED data generator

      Return type:
         "libsedml.SedDataGenerator"

   _add_data_set_to_report(id, name, doc_sed, report_sed, data_gen_sed)

      Add a dataset to a SED report

      Parameters:
         id (str) -- id

         name (str) -- name

         doc_sed (libsedml.SedDocument) -- SED document

         report_sed (libsedml.SedReport) -- SED report

         data_gen_sed (libsedml.SedDataGenerator) -- SED data
         generator

      Returns:
         SED data set

      Return type:
         "libsedml.SedDataSet"

   _add_metadata_to_doc(sim, doc_sed)

      Add the metadata about a simulation experiment to the annotation
      of a SED document

      Id

      Name

      Authors

      Description

      Tags

      References

      License

      Parameters:
         sim (Simulation) -- simulation experiment

         doc_sed (libsedml.SedDocument) -- SED document

   _add_model_to_doc(model, filename, doc_sed)

      Add a model to a SED document

      Parameters:
         model (dict) -- model

         filename (str) -- path to the model definition

         doc_sed (libsedml.SedDocument) -- SED document

      Returns:
         SED model

      Return type:
         "libsedml.SedModel"

   _add_param_change_to_alg(change, doc_sed, alg_sed)

      Add simulation algorithm parameter change to a SED document

      Parameters:
         change (ParameterChange) -- simulation algorithm parameter
         change

         doc_sed (libsedml.SedDocument) -- SED document

         alg_sed (libsedml.SedAlgorithm) -- SED simulation algorithm

      Returns:
         SED simulation algorithm paremeter change

      Return type:
         "libsedml.SedAlgorithmParameter"

   _add_param_changes_to_alg(changes, doc_sed, alg_sed)

      Add simulation algorithm parameter changes to a SED document

      Parameters:
         changes (list of ParameterChange) -- simulation algorithm
         parameter changes

         doc_sed (libsedml.SedDocument) -- SED document

         alg_sed (libsedml.SedAlgorithm) -- SED simulation algorithm

      Returns:
         list of SED simulation algorithm
            paremeter changes

      Return type:
         "list" of "libsedml.SedAlgorithmParameter"

   _add_parameter_change_to_model(change, doc_sed, model_sed)

      Add a model parameter change to a SED document

      Parameters:
         change (dict) -- model parameter change

         doc_sed (libsedml.SedDocument) -- SED document

         model_sed (libsedml.SedModel) -- SED model

      Returns:
         SED model parameter change

      Return type:
         "libsedml.SedChangeAttribute"

   _add_parameter_changes_to_model(changes, doc_sed, model_sed)

      Add model parameter changes to a SED document

      Parameters:
         changes (list of dict) -- model parameter changes

         doc_sed (libsedml.SedDocument) -- SED document

         model_sed (libsedml.SedModel) -- SED model

      Returns:
         list of SED model parameter changes

      Return type:
         "list" of "libsedml.SedChangeAttribute"

   _add_report_to_doc(doc_sed)

      Add a report to a SED document

      Parameters:
         doc_sed

          ("libsedml.SedDocument") -- SED document

      Returns:
         SED report

      Return type:
         "libsedml.SedReport"

   _add_sim_task_to_doc(doc_sed, model_sed, sim_sed)

      Add a task to simulate a model to a SED document

      Parameters:
         doc_sed (libsedml.SedDocument) -- SED document

         model_sed (libsedml.SedModel) -- SED model

         sim_sed (libsedml.SedSimulation) -- SED simulation

      Returns:
         SED task

      Return type:
         "libsedml.SedTask"

   _add_task_results_to_report(vars, doc_sed, task_sed, report_sed)

      Add simulation predictions to a SED report

      Parameters:
         vars (list of Variable) -- variables predicted by a model

         doc_sed (libsedml.SedDocument) -- SED document

         task_sed (libsedml.SedTask) -- SED task

         report_sed (libsedml.SedReport) -- SED report

      Returns:
         list of dictionary of data generators and variables for each
            simulation prediction

      Return type:
         "list" of "dict"

   _add_timecourse_sim_to_doc(sim, doc_sed)

      Add a timecourse simulation to a SED document

      Parameters:
         sim (Simulation) -- simulation experiment

         doc_sed (libsedml.SedDocument) -- SED document

      Returns:
         timecourse simulation

      Return type:
         "libsedml.SedUniformTimeCourse"

   _add_var_to_data_gen(id, name, symbol, doc_sed, data_gen_sed, task_sed)

      Add a variable to a SED data generator

      Parameters:
         id (str) -- id

         name (str) -- name

         symbol (str) -- symbol

         doc_sed (libsedml.SedDocument) -- SED document

         data_gen_sed (libsedml.SedDataGenerator) -- SED data
         generator

         task_sed (libsedml.SedTask) -- SED task

      Returns:
         SED variable

      Return type:
         "libsedml.SedVariable"

   static _call_libsedml_method(doc_sed, obj_sed, method_name, *args, **kwargs)

      Call a method of a SED object and check if there's an error

      Parameters:
         doc_sed (libsedml.SedDocument) -- SED document

         obj_sed (libsedml.SedBase) -- SED object

         method_name (str) -- method name

         *args (list) -- positional arguments to the method

         **kwargs (dict, optional) -- keyword arguments to the method

      Returns:
         libsedml return code

      Return type:
         "int"

   _create_doc(level, version)

      Create a SED document

      Parameters:
         level (int) -- SED-ML level

         version (int) -- SED-ML version

      Returns:
         SED document

      Return type:
         "libsedml.SedDocument"

   _export_doc(doc_sed, filename)

      Export a SED document to an XML file

      Parameters:
         doc_sed (libsedml.SedDocument) -- SED document

         filename (str) -- path to save document in XML format

   run(model_vars, sim, model_filename, sim_filename, level=1, version=3)

      Parameters:
         model_vars (list of Variable) -- List of variables in the
         model. Each variable should have the keys id and target

         sim (Simulation) -- Simulation experiment

         model_filename (str) -- Path to the model definition

         sim_filename (str) -- Path to save simulation experiment in
         SED-ML format

         level (int) -- SED-ML level

         version (int) -- SED-ML version

      Returns:
         SED document

      Return type:
         "libsedml.SedDocument"

class Biosimulations_format_utils.sim.sedml.SedMlSimReader

   Bases:

   Biosimulations_format_utils.sim.core.SimReader

   _abc_impl = <_abc_data object>

   _create_sim(sim_sed)

      Create a simulation for a SED simulation

      Parameters:
         sim_sed

          ("libsedml.SedSimulation") -- SED simulation

      Returns
         "Simulation": simulation

   _decode_obj_from_xml(obj_xml)

      Decode an object from its XML representation

      Parameters:
         obj_xml

          ("libsedml.XMLNode") -- XML representation of an object

      Returns:
         object

      Return type:
         "XmlNode"

   _get_obj_annotation(obj_sed)

      Get the annotated properies of a SED object

      Parameters:
         obj_sed

          ("libsedml.SedBase") -- SED object

      Returns:
         list of annotations

      Return type:
         "list" of "XmlNode"

   _get_parameter_change_from_model(change_sed)

      Get a model parameter change from a SED change attribute

      Parameters:
         change_sed

          ("libsedml.SedChangeAttribute") -- SED change attribute

      Returns:
         *ParameterChange*: model parameter change

      Return type:
         obj

   _read_metadata(doc_sed, sim)

      Read metadata from a SED document

      Parameters:
         doc_sed (libsedml.SedDocument) -- SED document

         sim (Simulation) -- simulation

   _read_model(model_sed, sim)

      Read a SED model

      Parameters:
         model_sed (libsedml.SedModel) -- SED model

         sim (Simulation) -- simulation

   _read_model_variables(task_sed, sim)

      Read model variables from SED data generators

      Parameters:
         task_sed (libsedml.Sed) -- SED task

         sim (Simulation) -- simulation

   _read_sim(sim_sed, sim)

      Read a SED simulation

      Parameters:
         sim_sed (libsedml.SedSimulation) -- SED simulation

         sim (Simulation) -- simulation

   run(filename)

      Base class for reading a simulation experiment from a SED
      document

      Parameters:
         filename

          ("str") -- path to SED-ML document that describes a
         simulation experiment

      Returns:
         simulations

      Return type:
         "list" of "Simulation"

Module contents

Utilities for working with simulation experiments

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-22

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_format_utils.sim.SimFormat

   Bases: "int", "wc_utils.util.enumerate.CaseInsensitiveEnum"

   Simulation experiment formats

   _member_map_ = {'sedml': <SimFormat.sedml: 1>, 'sessl': <SimFormat.sessl: 2>}

   _member_names_ = ['sedml', 'sessl']

   _member_type_

      alias of "builtins.int"

   _value2member_map_ = {1: <SimFormat.sedml: 1>, 2: <SimFormat.sessl: 2>}

   sedml = 1

   sessl = 2

Biosimulations_format_utils.sim.write_sim(model_vars, sim, model_filename, sim_filename, sim_format, **sim_format_opts)

   Write a simulation experiment to a file

   Parameters:
      model_vars (list of dict) -- List of variables in the model.
      Each variable should have the keys id and target.

      sim (dict) -- Simulation experiment

      model_filename (str) -- Path to the model definition

      sim_filename (str) -- Path to save simulation experiment in SED-
      ML format

      sim_format (SimFormat) -- simulation experiment format

      sim_format_opts (dict) -- options to the simulation experiment
      format (e.g., level, version)

Biosimulations_format_utils.sim.read_sim(filename, model_format, sim_format)

   Read a simulation experiment from a file

   Parameters:
      filename (str) -- path to save simulation

      model_format (ModelFormat) -- model format

      sim_format (SimFormat) -- simulation experiment format

   Returns:
      simulations

   Return type:
      "list" of "Simulation"
