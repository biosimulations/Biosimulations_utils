Biosimulations_utils.biomodel package

Submodules

Biosimulations_utils.biomodel.core module

Utilities for working with models

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-22

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

exception Biosimulations_utils.biomodel.core.BiomodelIoError

   Bases: "Exception"

   Model IO error

exception Biosimulations_utils.biomodel.core.BiomodelIoWarning

   Bases: "UserWarning"

   Model IO warning

class Biosimulations_utils.biomodel.core.BiomodelReader

   Bases: "abc.ABC"

   Read information about models

   _filename

      path to a file which defines a model

      Type:
         "str"

   _abc_impl = <_abc_data object>

   abstract _read_format(model_orig, model)

      Read the format of a model

      Parameters:
         model_orig (object) -- original model encoded in a format
         such as SBML

         model (Biomodel) -- model

      Returns:
         format of the model

      Return type:
         "Format"

   abstract _read_from_file(filename, model)

      Read a model from a file

      Parameters:
         filename (str) -- path to a file which defines a model

         model (Biomodel) -- model

      Returns:
         model encoded in a format such as SBML

      Return type:
         "object"

   abstract _read_metadata(model_orig, model)

      Read the metadata of a model

      Parameters:
         model_orig (object) -- original model encoded in a format
         such as SBML

         model (Biomodel) -- model

      Returns:
         model with additional metadata

      Return type:
         "Biomodel"

   abstract _read_parameters(model_orig, model)

      Read the parameters of a model

      Parameters:
         model_orig (object) -- original model encoded in a format
         such as SBML

         model (Biomodel) -- model

      Returns:
         information about parameters

      Return type:
         "list" of "BiomodelParameter"

   abstract _read_units(model_orig, model)

      Read the units of a model

      Parameters:
         model_orig (object) -- original model encoded in a format
         such as SBML

         model (Biomodel) -- model

      Returns:
         dictionary that maps the ids of units to their definitions

      Return type:
         "dict"

   abstract _read_variables(model_orig, model)

      Read the variables of a model

      Parameters:
         model_orig (object) -- original model encoded in a format
         such as SBML

         model (Biomodel) -- model

      Returns:
         information about the variables of the model

      Return type:
         "list" of "BiomodelVariable"

   run(filename)

      Read a model from a file

      Parameters:
         filename

          ("str") -- path to a file which defines a model

      Returns:
         model

      Return type:
         "Biomodel"

Biosimulations_utils.biomodel.data_model module

Data model for biomodels

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-31

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_utils.biomodel.data_model.Biomodel(id=None, name=None, file=None, image=None, description=None, format=None, framework=None, taxon=None, tags=None, identifiers=None, references=None, authors=None, license=None, parameters=None, variables=None, created=None, updated=None)

   Bases: "object"

   A biomodel

   id

      id

      Type:
         "str"

   name

      name

      Type:
         "str"

   file

      file

      Type:
         "RemoteFile"

   image

      image file

      Type:
         "RemoteFile"

   description

      description

      Type:
         "str"

   format

      format

      Type:
         "Format"

   framework

      modeling framework

      Type:
         "OntologyTerm"

   taxon

      taxon

      Type:
         "Taxon"

   tags

      tags

      Type:
         "list" of "str"

   identifiers

      identifiers

      Type:
         "list" of "Identifier"

   references

      references

      Type:
         "list" of "JournalReference"

   authors

      authors

      Type:
         "list" of "Person"

   license

      license

      Type:
         "License"

   parameters

      parameters (e.g., initial conditions and rate constants)

      Type:
         "list" of

         BiomodelParameter

   variables

      variables (e.g., model predictions)

      Type:
         "list" of

         BiomodelVariable

   created

      date that the model was created

      Type:
         "datetime.datetime"

   updated

      date that the model was last updated

      Type:
         "datetime.datetime"

   __eq__(other)

      Determine if two models are semantically equal

      Parameters:
         other

          (

         Biomodel

         ) -- other model

      Returns:
         "bool"

   classmethod from_json(val)

      Create model from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         Biomodel

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.biomodel.data_model.BiomodelFormat(value)

   Bases: "wc_utils.util.enumerate.CaseInsensitiveEnum"

   Model format metadata

   bngl = <Biosimulations_utils.data_model.Format object>

   cellml = <Biosimulations_utils.data_model.Format object>

   kappa = <Biosimulations_utils.data_model.Format object>

   mml = <Biosimulations_utils.data_model.Format object>

   neuroml = <Biosimulations_utils.data_model.Format object>

   pharmml = <Biosimulations_utils.data_model.Format object>

   sbml = <Biosimulations_utils.data_model.Format object>

class Biosimulations_utils.biomodel.data_model.BiomodelParameter(target=None, group=None, id=None, name=None, description=None, identifiers=None, type=None, value=None, recommended_range=None, units=None)

   Bases: "object"

   A parameter of a model

   target

      address within the model (e.g., XML path)

      Type:
         "str"

   group

      Name of the group that the parameter belongs to (e.g., 'Initial
      species amounts/concentrations'). Used to organize the display
      of parameters in the BioSimulations user interface.

      Type:
         "str"

   id

      id

      Type:
         "str"

   name

      name

      Type:
         "str"

   description

      description

      Type:
         "str"

   identifiers

      identifiers

      Type:
         "list" of "Identifier"

   type

      type of

      value

      Type:
         "Type"

   value

      value

      Type:
         "object"

   recommended_range

      minimum and maximum recommended values of

      value

      Type:
         "list" of "object"

   units

      units of

      value

      Type:
         "str"

   __eq__(other)

      Determine if two parameters are semantically equal

      Parameters:
         other

          (

         BiomodelParameter

         ) -- other parameter

      Returns:
         "bool"

   classmethod from_json(val)

      Create parameter from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         BiomodelParameter

   static sort_key(parameter)

      Get a key to sort a parameter

      Parameters:
         parameter

          (

         BiomodelParameter

         ) -- parameter

      Returns:
         "str"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.biomodel.data_model.BiomodelVariable(target=None, group=None, id=None, name=None, description=None, identifiers=None, type=None, units=None)

   Bases: "object"

   A variable of a model

   target

      address within the model (e.g., XML path)

      Type:
         "str"

   group

      Name of the group that the variable belongs to (e.g., 'Species
      amounts/concentrations'). Used to organize the display of
      variable in the BioSimulations user interface.

      Type:
         "str"

   id

      id

      Type:
         "str"

   name

      name

      Type:
         "str"

   description

      description

      Type:
         "str"

   identifiers

      identifiers

      Type:
         "list" of "Identifier"

   type

      type of "value"

      Type:
         "Type"

   units

      units of "value"

      Type:
         "str"

   __eq__(other)

      Determine if two variables are semantically equal

      Parameters:
         other

          (

         BiomodelVariable

         ) -- other variable

      Returns:
         "bool"

   classmethod from_json(val)

      Create variable from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         BiomodelVariable

   static sort_key(variable)

      Get a key to sort a variable

      Parameters:
         variable

          (

         BiomodelVariable

         ) -- variable

      Returns:
         "str"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.biomodel.data_model.BiomodelingFramework(value)

   Bases: "enum.Enum"

   An enumeration.

   flux_balance = <Biosimulations_utils.data_model.OntologyTerm object>

   logical = <Biosimulations_utils.data_model.OntologyTerm object>

   non_spatial_continuous = <Biosimulations_utils.data_model.OntologyTerm object>

   non_spatial_discrete = <Biosimulations_utils.data_model.OntologyTerm object>

   spatial_continuous = <Biosimulations_utils.data_model.OntologyTerm object>

   spatial_discrete = <Biosimulations_utils.data_model.OntologyTerm object>

Biosimulations_utils.biomodel.sbml module

Utilities for working with SBML-encoded models

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-22

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_utils.biomodel.sbml.SbmlBiomodelReader

   Bases:

   Biosimulations_utils.biomodel.core.BiomodelReader

   Read information about SBML-encoded models

   _logger

      logger

      Type:
         "logging.Logger"

   _abc_impl = <_abc_data object>

   _calc_recommended_param_range(value, zero_fold=10.0, non_zero_fold=10.0)

      Calculate a recommended range for the value of a parameter

      Parameters:
         value (float) -- Default value

         non_zero_fold (float, optional) -- Multiplicative factor, f,
         for the recommended minimum and maximum values relative to
         the default value, d, producing the recommend range d / f - d
         * f.

      Returns:
         recommended minimum and maximum values of the parameter

      Return type:
         "list" of "float"

   _format_unit_def(unit_def_sbml)

      Get a human-readable representation of a unit definition

      Parameters:
         unit_def_sbml

          ("libsbml.UnitDefinition") -- unit definition

      Returns:
         human-readable string representation of the unit definition

      Return type:
         "str"

   _get_compartment(model_sbml, comp_id)

      Get a compartment

      Parameters:
         model_sbml (libsbml.Model) -- SBML-encoded model

         comp_id (str) -- compartment id

      Returns:
         compartment

      Return type:
         "libsbml.Compartment"

   _get_reaction(model_sbml, rxn_id)

      Get a reaction

      Parameters:
         model_sbml (libsbml.Model) -- SBML-encoded model

         rxn_id (str) -- reaction id

      Returns:
         reaction

      Return type:
         "libsbml.Reaction"

   classmethod _get_xml_attr_by_name(node, name)

      Get an attribute of an XML element with a prefix and name

      Parameters:
         node (libsbml.XMLNode) -- XML node

         name (XmlName) -- attribute name

      Returns:
         attribute value

      Return type:
         "str"

   classmethod _get_xml_child_by_name(node, name)

      Get the child of an XML element with a prefix and name

      Parameters:
         node (libsbml.XMLNode) -- XML node

         name (XmlName) -- name

      Returns:
         child with prefix and name

      Return type:
         "libsbml.XMLNode"

   classmethod _get_xml_child_by_names(node, names)

      Get the child of an XML element with a prefix and name

      Parameters:
         node (libsbml.XMLNode) -- XML node

         names (list of XmlName) -- names

      Returns:
         child with prefix and name

      Return type:
         "libsbml.XMLNode"

   _read_constant_from_math(math_sbml)

      Read the constant value of a mathematical expression

      Parameters:
         math_sbml

          ("libsbml.ASTNode") -- mathematical expression

      Returns:
         Type: type

         int or float: value

      Return type:
         "tuple"

   _read_format(model_sbml, model)

      Read the metadata of a model

      Parameters:
         model_sbml (libsbml.Model) -- SBML-encoded model

         model (Biomodel) -- model

      Returns:
         format of the model

      Return type:
         "Format"

   _read_from_file(filename, model)

      Read a SBML-encoded model from a file

      Parameters:
         filename

          ("str") -- path to a file which defines an SBML-encoded
         model

      Returns:
         SBML-encoded model

      Return type:
         "libsbml.Model"

      Raises:
         ValueError

          -- file doesn't exist

   _read_metadata(model_sbml, model)

      Read the metadata of a model

      Parameters:
         model_sbml (libsbml.Model) -- SBML-encoded model

         model (Biomodel) -- model

      Returns:
         model with additional metadata

      Return type:
         "Biomodel"

      Raises:
         BiomodelIoError

          -- if the model uses an unsupported SBML package or any
         unsupported combination of packages

   _read_parameter(param_sbml, model, rxn_sbml=None, rxn_id=None, rxn_name=None)

      Read information about a SBML parameter

      Parameters:
         param_sbml (libsbml.BiomodelParameter) -- SBML parameter

         model (Biomodel) -- model

         rxn_sbml (libsbml.Reaction, optional) -- SBML reaction

         rxn_id (str, optional) -- id of the parent reaction (used by
         local parameters)

         rxn_name (str, optional) -- name of the parent reaction (used
         by local parameters)

      Returns:
         information about the parameter

      Return type:
         "BiomodelParameter"

      Raises:
         AssertionError

          -- the parameter doesn't have an id

   _read_parameters(model_sbml, model, units)

      Read information about the parameters of a model

      Parameters:
         model_sbml (libsbml.Model) -- SBML-encoded model

         model (Biomodel) -- model

         units (dict) -- dictionary that maps the ids of units to
         their definitions

      Returns:
         information about parameters

      Return type:
         "list" of "BiomodelParameter"

      Raises:
         AssertionError

          -- if any of the following conditions are met:          * A
         compartment, species, or reaction doesn't have an id     *
         The id of the active flux objective is the empty string

   _read_units(model_sbml, model)

      Read the units of a model

      Parameters:
         model_sbml (libsbml.Model) -- SBML-encoded model

         model (Biomodel) -- model

      Returns:
         dictionary that maps the ids of units to their definitions

      Return type:
         "dict"

   _read_variable(model_sbml, species_sbml, model)

      Read information about a SBML species

      Parameters:
         model_sbml (libsbml.Biomodel) -- SBML-encoded model

         species_sbml (libsbml.Species) -- SBML species

         model (Biomodel) -- model

      Returns:
         information about the species

      Return type:
         "BiomodelVariable"

      Raises:
         AssertionError

          -- the species has no id

   _read_variables(model_sbml, model, units)

      Read the variables of a model

      Parameters:
         model_sbml (libsbml.Model) -- SBML-encoded model

         model (Biomodel) -- model

         units (dict) -- dictionary that maps the ids of units to
         their definitions

      Returns:
         information about the variables of the model

      Return type:
         "list" of "BiomodelVariable"

      Raises:
         AssertionError

          -- there is no active objective or the active flux objective
         has no id

Biosimulations_utils.biomodel.sbml.visualize_biomodel(model_filename, img_filename, requests_session=None, remove_layouts=True, remove_units=True)

   Use

   MINERVA

    to visualize a model and save the visualization to a PNG file.

   Parameters:
      model_filename (str) -- path to the SBML-encoded model

      img_filename (str) -- path to save the visualization of the
      model

      requests_session (requests_cache.core.CachedSession, optional)
      -- cached requests session

      remove_layouts (bool, optional) -- if True, remove layouts from
      model

      remove_units (bool, optional) -- if True, remove units from
      model

   Returns:
      image

   Return type:
      "RemoteFile"

   Raises:
      BiomodelIoError

       -- if an image could not be generated

Module contents

Utilities for working with models

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-22

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

Biosimulations_utils.biomodel.read_biomodel(filename, format)

   Read a model from a file

   Parameters:
      filename (str) -- path to a file which defines a model

      format (BiomodelFormat) -- model format

   Returns:
      model

   Return type:
      "dict"

   Raises:
      NotImplementedError

       -- the format is not supported
