Biosimulations_utils.simulation package

Submodules

Biosimulations_utils.simulation.core module

Utilities for working with simulations

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-22

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_utils.simulation.core.SimulationWriter

   Bases: "abc.ABC"

   Base class for simulation writers

   _abc_impl = <_abc_data object>

class Biosimulations_utils.simulation.core.SimulationReader

   Bases: "abc.ABC"

   Base class for simulation readers

   _abc_impl = <_abc_data object>

exception Biosimulations_utils.simulation.core.SimulationIoError

   Bases: "Exception"

   Simulation IO error

exception Biosimulations_utils.simulation.core.SimulationIoWarning

   Bases: "UserWarning"

   Simulation IO warning

Biosimulations_utils.simulation.data_model module

Data model for simulations

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-31

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_utils.simulation.data_model.SimulationFormat

   Bases: "wc_utils.util.enumerate.CaseInsensitiveEnum"

   Simulation format metadata

   sedml = <Biosimulations_utils.data_model.Format object>

   sessl = <Biosimulations_utils.data_model.Format object>

class Biosimulations_utils.simulation.data_model.Simulation(id=None, name=None, image=None, description=None, tags=None, identifiers=None, references=None, authors=None, license=None, format=None, model=None, model_parameter_changes=None, algorithm=None, algorithm_parameter_changes=None, created=None, updated=None)

   Bases: "object"

   Simulation experiments

   id

      id

      Type:
         "str"

   name

      name

      Type:
         "str"

   image

      image file

      Type:
         "RemoteFile"

   description

      description

      Type:
         "str"

   tags

      tags

      Type:
         "list" of "str"

   identifiers

      identifiers

      Type:
         "list" of "Identifier"

   references

      references

      Type:
         "list" of "JournalReference"

   authors

      authors

      Type:
         "list" of "Person"

   license

      license

      Type:
         "License"

   format

      format

      Type:
         "Format"

   model

      model

      Type:
         "Biomodel"

   model_parameter_changes

      model parameter changes

      Type:
         "list" of

         ParameterChange

   algorithm

      simulation algorithm

      Type:
         Algorithm

   algorithm_parameter_changes

      simulation algorithm parameter changes

      Type:
         "list" of

         ParameterChange

   created

      date that the simulation was created

      Type:
         "datetime.datetime"

   updated

      date that the simulation was last updated

      Type:
         "datetime.datetime"

   __eq__(other)

      Determine if two simulations are semantically equal

      Parameters:
         other

          (

         Simulation

         ) -- other simulation

      Returns:
         "bool"

   classmethod from_json(val)

      Create simulation from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         Simulation

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.simulation.data_model.TimecourseSimulation(id=None, name=None, image=None, description=None, tags=None, identifiers=None, references=None, authors=None, license=None, format=None, model=None, model_parameter_changes=None, start_time=None, output_start_time=None, end_time=None, num_time_points=None, algorithm=None, algorithm_parameter_changes=None, created=None, updated=None)

   Bases:

   Biosimulations_utils.simulation.data_model.Simulation

   Timecourse simulation

   start_time

      start time

      Type:
         "float"

   output_start_time

      time to begin recording simulation results

      Type:
         "float"

   end_time

      end time

      Type:
         "float"

   num_time_points

      number of time points to record

      Type:
         "int"

   __eq__(other)

      Determine if two simulations are semantically equal

      Parameters:
         other

          (

         TimecourseSimulation

         ) -- other algorithm

      Returns:
         "bool"

   classmethod from_json(val)

      Create simulation from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         TimecourseSimulation

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.simulation.data_model.SteadyStateSimulation(id=None, name=None, image=None, description=None, tags=None, identifiers=None, references=None, authors=None, license=None, format=None, model=None, model_parameter_changes=None, algorithm=None, algorithm_parameter_changes=None, created=None, updated=None)

   Bases:

   Biosimulations_utils.simulation.data_model.Simulation

   Steady-state simulation

class Biosimulations_utils.simulation.data_model.Algorithm(id=None, name=None, kisao_term=None, ontology_terms=None, parameters=None, modeling_frameworks=None, model_formats=None, simulation_formats=None, archive_formats=None, references=None)

   Bases: "object"

   Simulation algorithm

   id

      id

      Type:
         "str"

   name

      name

      Type:
         "str"

   kisao_term

      KiSAO id

      Type:
         "OntologyTerm"

   ontology_terms

      list of sematically equivalent KiSAO ids for the parent
      simulator of an algorithm

      Type:
         "list" of "OntologyTerm"

   parameters

      parameters

      Type:
         "list" of

         AlgorithmParameter

   modeling_frameworks

      supported modeling frameworks

      Type:
         "list" of "OntologyTerm"

   model_formats

      supported model formats (e.g., SBML)

      Type:
         "list" of "Format"

   simulation_formats

      supported simulation formats (e.g., SED-ML)

      Type:
         "list" of "Format"

   archive_formats

      supported archive formats (e.g., COMBINE)

      Type:
         "list" of "Format"

   references

      references

      Type:
         "list" of "JournalReference"

   __eq__(other)

      Determine if two algorithms are semantically equal

      Parameters:
         other

          (

         Algorithm

         ) -- other algorithm

      Returns:
         "bool"

   classmethod from_json(val)

      Create algorithm from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         Algorithm

   static sort_key(algorithm)

      Get a key to sort an algorithm

      Parameters:
         algorithm

          (

         Algorithm

         ) -- algorithm

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.simulation.data_model.AlgorithmParameter(id=None, name=None, type=None, value=None, recommended_range=None, kisao_term=None)

   Bases: "object"

   Algorithm parameter

   id

      id

      Type:
         "str"

   name

      name

      Type:
         "str"

   type

      type

      Type:
         "Type"

   value

      value

      Type:
         "object"

   recommended_range

      recommend minimum and maximum values

      Type:
         "list" of "object"

   kisao_term

      KiSAO term

      Type:
         "OntologyTerm"

   __eq__(other)

      Determine if two algorithm parameters are semantically equal

      Parameters:
         other

          (

         AlgorithmParameter

         ) -- other algorithm parameter

      Returns:
         "bool"

   classmethod from_json(val)

      Create algorithm parameter from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         AlgorithmParameter

   static sort_key(parameter)

      Get a key to sort an algorithm parameter

      Parameters:
         parameter

          (

         AlgorithmParameter

         ) -- algorithm parameter

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.simulation.data_model.ParameterChange(parameter=None, value=None)

   Bases: "object"

   BiomodelParameter change

   parameter

      parameter

      Type:
         "BiomodelParameter" or

         AlgorithmParameter

   value

      value

      Type:
         "object"

   __eq__(other)

      Determine if two parameter changes are semantically equal

      Parameters:
         other

          (

         ParameterChange

         ) -- other parameter change

      Returns:
         "bool"

   classmethod from_json(val, ParameterType)

      Create parameter change from JSON

      Parameters:
         val (dict) --

         ParameterType (type) -- type of parameter

      Returns:
         ParameterChange

   static sort_key(change)

      Get a key to sort a parameter change

      Parameters:
         change

          (

         ParameterChange

         ) -- parameter change

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.simulation.data_model.SimulationResult(simulation=None, variable=None)

   Bases: "object"

   Simulation result

   simulation

      simulation

      Type:
         Simulation

   variable

      model variable

      Type:
         "BiomodelVariable"

   __eq__(other)

      Determine if two simulation results are semantically equal

      Parameters:
         other

          (

         SimulationResult

         ) -- other simulation result

      Returns:
         "bool"

   classmethod from_json(val)

      Create simulation result from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         SimulationResult

   static sort_key(result)

      Get a key to sort a simulation result

      Parameters:
         result

          (

         SimulationResult

         ) -- simulation result

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

Biosimulations_utils.simulation.sedml module

Module contents
