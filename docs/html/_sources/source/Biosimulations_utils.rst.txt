Biosimulations_utils package

Subpackages


Submodules

Biosimulations_utils._version module

Biosimulations_utils.api_client module

Client for interacting with the

BioSimulations REST API

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-04-06

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_utils.api_client.ApiClient(config=<module 'Biosimulations_utils.config' from '/home/runner/work/Biosimulations_utils/Biosimulations_utils/Biosimulations_utils/config.py'>, _dry_run=False)

   Bases: "object"

   Client for interacting with the

   BioSimulations REST API

   config

      package configuration

      Type:
         "object"

   _dry_run

      if "True", do not execute HTTP requests

      Type:
         "bool"

   _device_code

      auth0 code for a device

      Type:
         "str"

   _auth

      auth0 authorization type and token for a device for a user's
      account

      Type:
         "dict"

   _get_auth()

      Get the authorization header to access BioSimulations through a
      user's account

      Raises:
         requests.exceptions.HTTPError

          -- if an authentication token was not generated

   _get_device_code()

      Get a device code to authorize access to a BioSimulations
      account

      Raises:
         requests.exceptions.HTTPError

          -- if a device code was not generated

   exec(method, route, data=None)

      Execute a route of the BioSimulations API

      Parameters:
         method (str) -- HTTP request method (e.g., 'get', 'post',
         'put', 'patch', 'delete')

         route (str) -- route within the API (e.g., /models/model-id
         which gets information about model with id model-id)

         data (object) -- data for the route (e.g., {name: 'model
         name', ...} to use 'put' /models/model-id to change the name
         of the model with id model-id)

      Raises:
         requests.exceptions.HTTPError

          -- if the route was not successfully executed

   login()

      Login into BioSimulations using a browser

   logout()

      Logout of BioSimulations

      Raises:
         requests.exceptions.HTTPError -- if the user was not logged
         out

         AssertionError -- if the user is not logged in or wasn't
         logged out

Biosimulations_utils.config module

Package configuration

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-04-06

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

Biosimulations_utils.data_model module

Utility clases for data models for models and simulations

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-03-31

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

class Biosimulations_utils.data_model.Format(id=None, name=None, version=None, edam_id=None, url=None, spec_url=None, mime_type=None, extension=None, sed_urn=None)

   Bases: "object"

   A format

   id

      name (e.g., SBML)

      Type:
         "str"

   name

      name (e.g., Systems Biology Markup Language)

      Type:
         "str"

   version

      version (e.g., L3V2)

      Type:
         "str"

   edam_id

      EDAM identifier

      Type:
         "str"

   url

      URL

      Type:
         "str"

   spec_url

      URL for specification

      Type:
         "str"

   mime_type

      Multipurpose Internet Mail Extensions (MIME) type. Also known as
      media type.

      Type:
         "str"

   extension

      file extension (e.g., *xml*)

      Type:
         "str"

   sed_urn

      SED-ML URN

      Type:
         "str"

   __eq__(other)

      Determine if two formats are semantically equal

      Parameters:
         other

          (

         Format

         ) -- other format

      Returns:
         "bool"

   classmethod from_json(val)

      Create format from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         Format

   static sort_key(format)

      Get a key to sort a format

      Parameters:
         format

          (

         Format

         ) -- format

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.data_model.Identifier(namespace=None, id=None)

   Bases: "object"

   An identifier of a concept

   namespace

      namespace (e.g., Identifiers.org namespace such as
      'biomodels.db')

      Type:
         "str"

   id

      id within namespace

      Type:
         "str"

   __eq__(other)

      Determine if two identifiers are semantically equal

      Parameters:
         other

          (

         Identifier

         ) -- other identifier

      Returns:
         "bool"

   classmethod from_json(val)

      Create an identifier from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         Identifier

   static sort_key(identifier)

      Get a key to sort an identifier

      Parameters:
         identifier

          (

         Identifier

         ) -- identifier

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.data_model.JournalReference(authors=None, title=None, journal=None, volume=None, issue=None, pages=None, year=None, doi=None)

   Bases: "object"

   A format

   authors

      authors

      Type:
         "str"

   title

      title

      Type:
         "str"

   journal

      journal

      Type:
         "str"

   volume

      volume

      Type:
         "int" or "str"

   issue

      issue number

      Type:
         "int"

   pages

      pages

      Type:
         "str"

   year

      year

      Type:
         "int"

   doi

      DOI

      Type:
         "str"

   __eq__(other)

      Determine if two formats are semantically equal

      Parameters:
         other

          (

         Format

         ) -- other format

      Returns:
         "bool"

   classmethod from_json(val)

      Create journal reference from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         JournalReference

   static sort_key(ref)

      Get a key to sort a reference

      Parameters:
         ref

          (

         JournalReference

         ) -- reference

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.data_model.License

   Bases: "wc_utils.util.enumerate.CaseInsensitiveEnum"

   A license

   cc0 = 'CC0'

   cc_by = 'CC BY'

   cc_by_nc = 'CC BY-NC'

   cc_by_nc_sa = 'CC BY-NC-SA'

   cc_by_sa = 'CC BY-SA'

   mit = 'MIT'

   other = 'Other'

class Biosimulations_utils.data_model.OntologyTerm(ontology=None, id=None, name=None, description=None, iri=None)

   Bases: "object"

   A term in an ontology

   ontology

      id of the parent ontology

      Type:
         "str"

   id

      id

      Type:
         "str"

   name

      name

      Type:
         "str"

   description

      description

      Type:
         "str"

   iri

      IRI

      Type:
         "str"

   __eq__(other)

      Determine if two ontology terms are semantically equal

      Parameters:
         other

          (

         OntologyTerm

         ) -- other term

      Returns:
         "bool"

   classmethod from_json(val)

      Create an ontology term from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         OntologyTerm

   static sort_key(term)

      Get a key to sort an ontology term

      Parameters:
         term

          (

         OntologyTerm

         ) -- term

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.data_model.Person(first_name=None, middle_name=None, last_name=None)

   Bases: "object"

   A person, such as an author of a journal article

   first_name

      first name

      Type:
         "str"

   middle_name

      middle name

      Type:
         "str"

   last_name

      last name

      Type:
         "str"

   __eq__(other)

      Determine if two formats are semantically equal

      Parameters:
         other

          (

         Format

         ) -- other format

      Returns:
         "bool"

   classmethod from_json(val)

      Create person from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         Person

   static sort_key(person)

      Get a key to sort a person

      Parameters:
         person

          (

         Person

         ) -- person

      Returns:
         "tuple"

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.data_model.RemoteFile(name=None, type=None, size=None)

   Bases: "object"

   A remote file

   name

      name (e.g., model.xml)

      Type:
         "str"

   type

      MIME type (e.g., application/sbml+xml)

      Type:
         "str"

   size

      size in bytes

      Type:
         "int"

   __eq__(other)

      Determine if two formats are semantically equal

      Parameters:
         other

          (

         Format

         ) -- other format

      Returns:
         "bool"

   classmethod from_json(val)

      Create a remote file from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         RemoteFile

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.data_model.Taxon(id=None, name=None)

   Bases: "object"

   A taxon in the NCBI Taxonomy database

   id

      id

      Type:
         "int"

   name

      name

      Type:
         "str"

   __eq__(other)

      Determine if two taxa are semantically equal

      Parameters:
         other

          (

         Taxon

         ) -- other taxon

      Returns:
         "bool"

   classmethod from_json(val)

      Create a taxon from JSON

      Parameters:
         val

          ("dict") --

      Returns:
         Taxon

   to_json()

      Export to JSON

      Returns:
         "dict"

class Biosimulations_utils.data_model.Type

   Bases: "str", "enum.Enum"

   A type

   _generate_next_value_(start, count, last_values)

   _member_map_ = {'boolean': <Type.boolean: 'boolean'>, 'float': <Type.float: 'float'>, 'integer': <Type.integer: 'integer'>, 'string': <Type.string: 'string'>}

   _member_names_ = ['boolean', 'integer', 'float', 'string']

   _member_type_

      alias of "builtins.str"

   _value2member_map_ = {'boolean': <Type.boolean: 'boolean'>, 'float': <Type.float: 'float'>, 'integer': <Type.integer: 'integer'>, 'string': <Type.string: 'string'>}

   boolean = 'boolean'

   float = 'float'

   integer = 'integer'

   string = 'string'

Biosimulations_utils.utils module

Utilities

Author:
   Jonathan Karr <

   karr@mssm.edu

   >

Date:
   2020-04-01

Copyright:
   2020, Center for Reproducible Biomedical Modeling

License:
   MIT

Biosimulations_utils.utils.get_enum_format_by_attr(FormatEnum, attr_name, attr_val)

   Get a biomodel format by its specification URL

   Parameters:
      FormatEnum (type) -- enumeration of formats (i.e. subclass of
      enum.Enum)

      attr_name (str) -- attribute name

      attr_val (str) -- attribute value

   Returns:
      format

   Return type:
      "Format"

Biosimulations_utils.utils.pretty_print_units(units_str)

   Pretty print units

   Parameters:
      units_str

       ("str") -- units

   Returns:
      pretty printed units

   Return type:
      "str"

Biosimulations_utils.utils.crop_image(filename, background_to_transparent=None)

   Crop an image and, optionally, make the background transparent

   Parameters:
      filename (str) -- path to image

      background_to_transparent (list of int, optional) -- background
      to make transparent

Biosimulations_utils.utils.assert_exception(success, exception)

   Raise an error if "success" is "False"

   Parameters:
      success (bool) --

      exception (Exception) --

   Raises:
      Exception

       --

Biosimulations_utils.utils.get_logger(name='log')

   Get a logger

   Parameters:
      name

       ("str", optional) -- name

   Returns:
      logger

   Return type:
      "logging.Logger"

Module contents
